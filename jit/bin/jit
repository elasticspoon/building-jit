#!/usr/bin/env ruby

# require 'fileutils'
# require 'pathname'
# require_relative '../lib/workspace'
# require_relative '../lib/database'
# require_relative '../lib/entry'
# require_relative '../lib/database/tree'
# require_relative '../lib/database/author'
# require_relative '../lib/database/commit'
# require_relative '../lib/refs'
# require_relative '../lib/index'
# require_relative '../lib/repository'

require_relative '../lib/command'

begin
  cmd = Command.execute(Dir.getwd, ENV, ARGV, $stdin, $stdout, $stderr)
  exit cmd.status
rescue Command::Unknown => e
  warn "jit: #{e.message}"
  exit 1
rescue StandardError => e
  warn "fatal: #{e.message}"
  if ENV['DEBUG']
    e.backtrace.each do |line|
      warn "          from #{line}"
    end
  end
  exit 1
end

# command = ARGV.shift

# case command
# when 'init'
#   path = ARGV.fetch(0, Dir.getwd)

#   root_path = Pathname.new(File.expand_path(path))
#   git_path = root_path.join('.git')

#   %w[objects refs].each do |dir|
#     FileUtils.mkdir_p(git_path.join(dir))
#   rescue Errno::EACCES => e
#     warn "fatal #{e.message}"
#     exit 1
#   end

#   puts "Initialized empty JIT repository in #{git_path}"
#   exit 0
# when 'commit'
#   root_path = Pathname.new(Dir.getwd)
#   repo = Repository.new(root_path.join('.git'))

#   repo.index.load

#   root = Database::Tree.build(index.each_entry)
#   root.traverse { |tree| repo.database.store(tree) }

#   parent = repo.refs.read_head
#   name = ENV.fetch('GIT_AUTHOR_NAME')
#   email = ENV.fetch('GIT_AUTHOR_EMAIL')
#   author = Database::Author.new(name, email, Time.now.utc)
#   message = $stdin.read

#   commit = Database::Commit.new(parent, root.oid, author, message)
#   repo.database.store(commit)
#   repo.refs.update_head(commit.oid)

#   is_root = parent.nil? ? '(root-commit) ' : ''
#   puts "[#{is_root}#{commit.oid}] #{message.lines.first}"
#   exit 0
# when 'add'
#   root_path = Pathname.new(Dir.getwd)
#   repo = Repository.new(root_path.join('.git'))

#   begin
#     repo.index.load_for_update
#   rescue Lockfile::LockDenied => e
#     warn <<~ERROR
#       fatal: #{e.message}

#       Another git process seems to be running in this repository, e.g.
#       an editor opened by 'git commit'. Please make sure all processes
#       are terminated then try again. If it still fails, a git process
#       may have crashed in this repository earlier:
#       remove the file manually to continue.
#     ERROR
#     exit 128
#   end

#   begin
#     paths = ARGV.flat_map do |path_input|
#       path = Pathname.new(File.expand_path(path_input))
#       repo.workspace.list_files(path)
#     end
#   rescue Workspace::MissingFile => e
#     warn "fatal: #{e.message}"
#     repo.index.release_lock
#     exit 128
#   end

#   paths.each do |pathname|
#     data = repo.workspace.read_file(pathname)
#     stat = repo.workspace.stat_file(pathname)

#     blob = Database::Blob.new(data)
#     repo.database.store(blob)
#     repo.index.add(pathname, blob.oid, stat)
#   rescue Workspace::NoPermission => e
#     warn "error: #{e.message}"
#     warn 'fatal: adding files failed'
#     repo.index.release_lock
#     exit 128
#   end

#   repo.index.write_updates
#   exit 0
# else
#   warn "jit: '#{command}' is not a JIT command."
#   exit 1
# end
